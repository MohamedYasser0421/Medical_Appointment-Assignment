# -*- coding: utf-8 -*-
"""Dashboard_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uIZIeYGyQ1kweCa2IKmPYR4O-2h6PqQX
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("joniarroba/noshowappointments")

print("Path to dataset files:", path)

import kagglehub

# Download latest version
path = kagglehub.dataset_download("joniarroba/noshowappointments")

print("Path to dataset files:", path)

import pandas as pd
import plotly.express as px
import numpy as np
from plotly.subplots import make_subplots

df = pd.read_csv("/kaggle/input/noshowappointments/KaggleV2-May-2016.csv")
df.head()

df.info()

df['PatientId'] = df['PatientId'].astype('int64')

df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.date.astype('datetime64[ns]')
df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.date.astype('datetime64[ns]')

df.head()

df.drop(['PatientId', 'AppointmentID'], axis=1, inplace=True)

print("Unique Values in `Gender` => {}".format(df.Gender.unique()))
print("Unique Values in `Scholarship` => {}".format(df.Scholarship.unique()))
print("Unique Values in `Hypertension` => {}".format(df.Hipertension.unique()))
print("Unique Values in `Diabetes` => {}".format(df.Diabetes.unique()))
print("Unique Values in `Alcoholism` => {}".format(df.Alcoholism.unique()))
print("Unique Values in `Handicap` => {}".format(df.Handcap.unique()))
print("Unique Values in `SMSReceived` => {}".format(df.SMS_received.unique()))

df['Scholarship'] = df['Scholarship'].astype('object')
df['Hypertension'] = df['Hipertension'].astype('object')
df['Diabetes'] = df['Diabetes'].astype('object')
df['Alcoholism'] = df['Alcoholism'].astype('object')
df['Handicap'] = df['Handcap'].astype('object')
df['SMSReceived'] = df['SMS_received'].astype('object')

print("Unique Values in `Age` => {}".format(np.sort(df.Age.unique())))

print("Patients with `Age` less than -1 -> {}".format(df[df.Age == -1].shape[0]))
print("Patients with `Age` equal to 0 -> {}".format(df[df.Age == 0].shape[0]))

df = df[df.Age >= 0]

df[(df.Age <= 0) & ((df.Hypertension.astype(int) == 1) | (df.Diabetes.astype(int) == 1) | (df.Alcoholism.astype(int) == 1))]

print("Unique Values in `ScheduledDay` => {}".format(np.sort(df.ScheduledDay.dt.strftime('%Y-%m-%d').unique())))

print("Unique Values in `AppointmentDay` => {}".format(np.sort(df.AppointmentDay.dt.strftime('%Y-%m-%d').unique())))

print("Unique Values in `Neighbourhood` => {}".format(np.sort(df.Neighbourhood.unique())))

print("Total Count for `Neighbourhood` => {}".format(df.Neighbourhood.unique().size))

week_key = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']

df['ScheduledDay_DOW'] = df['ScheduledDay'].dt.day_name()
df['AppointmentDay_DOW'] = df['AppointmentDay'].dt.day_name()

df.head()

import plotly.io as pio

medical_template = pio.templates["plotly_white"].layout.template
medical_template.layout.paper_bgcolor = "#F8FBFF"  # very light blue
medical_template.layout.plot_bgcolor = "#F8FBFF"
medical_template.layout.font.color = "#1E2A38"      # dark navy
medical_template.layout.colorway = [
    "#2E86AB",  # primary blue
    "#28B463",  # green
    "#CA6F1E",  # orange
    "#AF7AC5",  # purple
    "#F39C12",  # gold
    "#D98880",  # soft red
]

pio.templates["medical_theme"] = medical_template
pio.templates.default = "medical_theme"

fig  = px.histogram(
    data_frame=df,x = "No-show",
    nbins = 10,title="show vs no show"
)
fig.show()

fig = px.bar(
    data_frame=df,
    x = "No-show",
    color = "Gender",
    barmode = "group",
    title="Gender vs No-show"
)
fig.show()

fig = px.box(
    data_frame=df,
    y = "Age",
)
fig.show()

fig = px.histogram(
    data_frame=df,
    x = "Age",
    nbins = 15,
    title="Age Distribution",
)
fig.show()

fig = px.histogram(
    df,
    x="Age",
    color="No-show",
    barmode="group",
    title="Show/NoShow of Appointments by Age"
)
fig.show()

fig = px.bar(
    data_frame=df,
    x = "Neighbourhood",
    title = "Number of appointments per neighbourhood"
)
fig.update_layout(
xaxis = dict(title = (dict(text = ""))),
)

fig.show()

fig = px.bar(
    data_frame=df,
    x = "Neighbourhood",
    color = "No-show",
    barmode = "group",
    title = "Showing up VS neighbourhood"
)
fig.update_layout(
xaxis = dict(title = (dict(text = ""))),
)

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['Scholarship']).size() /
               df.groupby(['Scholarship']).size()).reset_index()

df_ha_ratio.columns = ['Scholarship', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS Scholarship', 'Showing up Ratio by Scholarship'])

fig1 = px.bar(
    data_frame=df,
    x = "No-show",
    color = "Scholarship",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="Scholarship",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by Scholarship",
    showlegend=True
    )

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['Hypertension']).size() /
               df.groupby(['Hypertension']).size()).reset_index()

df_ha_ratio.columns = ['Hypertension', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS Hypertension', 'Showing up Ratio by Hypertension'])

fig1 = px.histogram(
    data_frame=df,
    x = "Hypertension",
    color = "No-show",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="Hypertension",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by Hypertension",
    showlegend=True
    )

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['Diabetes']).size() /
               df.groupby(['Diabetes']).size()).reset_index()

df_ha_ratio.columns = ['Diabetes', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS Diabetes', 'Showing up Ratio by Diabetes'])

fig1 = px.bar(
    data_frame=df,
    x = "No-show",
    color = "Diabetes",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="Diabetes",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by Diabetes",
    showlegend=True
    )

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['Alcoholism']).size() /
               df.groupby(['Alcoholism']).size()).reset_index()

df_ha_ratio.columns = ['Alcoholism', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS Alcoholism', 'Showing up Ratio by Alcoholism'])

fig1 = px.bar(
    data_frame=df,
    x = "No-show",
    color = "Alcoholism",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="Alcoholism",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by Alcoholism",
    showlegend=True
    )

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['Handcap']).size() /
               df.groupby(['Handcap']).size()).reset_index()

df_ha_ratio.columns = ['Handcap', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS Handicap', 'Showing up Ratio by Handicap'])

fig1 = px.histogram(
    data_frame=df,
    x = "Handcap",
    color = "No-show",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="Handcap",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by Handicap",
    showlegend=True
)

fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['SMS_received']).size() /
               df.groupby(['SMS_received']).size()).reset_index()

df_ha_ratio.columns = ['SMS_received', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS SMS_received', 'Showing up Ratio by SMS_received'])

fig1 = px.histogram(
    data_frame=df,
    x = "SMS_received",
    color = "No-show",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="SMS_received",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by SMS_received",
    showlegend=True
    )

fig.show()

fig = px.bar(
    data_frame=df,
    x = "ScheduledDay_DOW",
    color = "ScheduledDay_DOW",
    title = "Scheduled Count for Scheduled Day of Week"
)
fig.show()

fig = px.bar(
    data_frame=df,
    x = "AppointmentDay_DOW",
    color = "AppointmentDay_DOW",
    title = "Appointment Count for Appointment Day of Week"
)
fig.show()

df_ha_ratio = (df[df['No-show'] == 'No']
               .groupby(['AppointmentDay_DOW']).size() /
               df.groupby(['AppointmentDay_DOW']).size()).reset_index()

df_ha_ratio.columns = ['AppointmentDay_DOW', 'Show_Up_Ratio']

fig = make_subplots(
    rows=1, cols=2, subplot_titles=[
    'Showing up VS AppointmentDay_DOW', 'Showing up Ratio by AppointmentDay_DOW'])

fig1 = px.bar(
    data_frame=df,
    x = "AppointmentDay_DOW",
    color = "No-show",
    barmode = "group",
)
for trace in fig1.data:
    fig.add_trace(trace, row=1, col=1)

fig2 = px.bar(
    df_ha_ratio,
    x="AppointmentDay_DOW",
    y="Show_Up_Ratio"
)

fig.add_trace(fig2.data[0], row=1, col=2)

fig.update_layout(
    height=500,
    width=1000,
    title_text="Appointment Show-Up Analysis by AppointmentDay_DOW",
    showlegend=True
    )

fig.show()